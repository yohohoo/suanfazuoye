/*4-1  假设要在足够多的会场里安排一批活动，并希望使用尽可能少的会场。设计一个有效的贪心算法进行安排。
（这个问题实际上是著名的图着色问题。若将每一个活动作为图的一个 顶点，不相容活动间用边相连。
使相邻顶点着有不同颜色的最小着色数，相应于要找的最小会场数。）*/

import java.util.Arrays;   //引入Arrays类，这个类提供了对java中Array的一些工具方法
import java.util.Scanner;  //引入Scanner类

public class Main {
    public static void main(String[] args) {  //字符串类型
        Scanner sr = new Scanner(System.in);  //用户手动输入待安排的活动
        int k = sr.nextInt();   //输入一个正整数k,表示有k个待安排的活动
        int a[] = new int [k];  
        int b[] = new int [k];
        for(int i=0;i<k;i++) {
            a[i]=sr.nextInt();
            b[i]=sr.nextInt();
        }
        Arrays.sort(a);
        Arrays.sort(b);
        Greedy(k,a,b);
    }
    private static void Greedy(int k,int start[],int end[]){  //各活动开始时间存储于start数组中，结束时间存储于end数组中
        int j=0;
        int count = 0;
        for (int i=0;i<k;i++){
            if (start[i]<end[j]){  
               count++;
            }else{
                j++;
            }
        }
            System.out.println(count);  // 最少会场数
    }
